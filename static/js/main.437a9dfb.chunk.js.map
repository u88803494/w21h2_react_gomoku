{"version":3,"sources":["Board.js","App.js","serviceWorker.js","index.js"],"names":["RenderPieces","pieces","handleMove","movement","className","onClick","Board","squareValue","boardSize","renderBoard","Array","fill","this","props","squares","map","item","index","key","_item","React","Component","calculateWinner","x","y","boardCoordinates","i","start","end","push","slice","currentPieces","checkLine","currentX","currentY","directionX","directionY","nextX","nextY","lineLength","Information","status","App","state","blackIsNext","setState","Math","floor","winner","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.437a9dfb.chunk.js","sourcesContent":["import React from 'react';\nimport { boardSize } from './App';\n\nconst RenderPieces = ({ pieces, handleMove, movement }) => (\n  <div className=\"game__pieces\">\n    <div\n      className={`game__pieces--${pieces}`}\n      onClick={() => handleMove(movement)}\n    />\n  </div>\n);\n\nclass Board extends React.Component {\n  render() {\n    const squareValue = boardSize - 1;\n    const renderBoard = Array(squareValue * squareValue).fill(null);\n    const { squares, handleMove } = this.props;\n\n    return (\n      <div className=\"game__area\">\n        <div className=\"game__board\">\n          { // 下棋的部分\n            squares\n              .map((item, index) => (\n                <RenderPieces\n                  key={index}\n                  handleMove={handleMove}\n                  pieces={item}\n                  movement={index}\n                />\n              ))\n          }\n        </div>\n        <div className=\"game__lattice\">\n          { //  棋盤的部分\n            renderBoard\n              .map((_item, index) => (\n                <div className=\"game__squares\" key={index} />\n              ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './Board';\n\nexport const boardSize = 19;\n\n// 計算勝負用\nfunction calculateWinner(squares, x, y) {\n  if (x === null || y === null) {\n    return null;\n  }\n\n  // 轉化成二維陣列\n  const boardCoordinates = [];\n  for (let i = 0; i < boardSize; i += 1) {\n    const start = i * boardSize;\n    const end = start + boardSize;\n    boardCoordinates.push(squares.slice(start, end));\n  }\n\n  const currentPieces = boardCoordinates[y][x]; // 取得當前顏色\n\n  function checkLine(currentX, currentY, directionX, directionY) {\n    let nextX = currentX;\n    let nextY = currentY;\n    let lineLength = 0;\n\n    do {\n      nextX += directionX;\n      nextY += directionY;\n\n      if (\n        nextX >= 0 && nextX < boardSize\n        && nextY >= 0 && nextY < boardSize\n        && boardCoordinates[nextY][nextX] === currentPieces\n      ) {\n        lineLength += 1;\n      } else {\n        break;\n      }\n    } while (lineLength);\n    return lineLength;\n  }\n\n  // 計算不含自己有沒有超過四個子\n  if (\n    checkLine(x, y, 1, 0) + checkLine(x, y, -1, 0) >= 4\n    || checkLine(x, y, 0, 1) + checkLine(x, y, 0, -1) >= 4\n    || checkLine(x, y, 1, 1) + checkLine(x, y, -1, -1) >= 4\n    || checkLine(x, y, 1, -1) + checkLine(x, y, -1, 1) >= 4\n  ) {\n    return currentPieces;\n  }\n  return null;\n}\n\nconst Information = ({ status }) => (\n  <div className=\"game__info\">\n    <h1 className=\"game__title\">五子棋</h1>\n    <h3 className=\"game__state\">{status}</h3>\n  </div>\n);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(boardSize * boardSize).fill(null),\n      blackIsNext: true,\n      currentX: null,\n      currentY: null,\n    };\n  }\n\n  handleMove = (movement) => {\n    const {\n      squares, blackIsNext, currentX, currentY,\n    } = this.state;\n\n    if (calculateWinner(squares, currentX, currentY) || squares[movement]) {\n      return;\n    }\n\n    squares[movement] = blackIsNext ? 'black' : 'white';\n    this.setState({\n      squares,\n      blackIsNext: !blackIsNext,\n      currentX: movement % boardSize,\n      currentY: Math.floor(movement / boardSize),\n    });\n  }\n\n  render() {\n    const {\n      squares, blackIsNext, currentX, currentY,\n    } = this.state;\n    const winner = calculateWinner(squares, currentX, currentY);\n\n    let status;\n    if (winner) {\n      status = `Winner: ${winner}`;\n    } else {\n      status = `next: ${blackIsNext ? 'black' : 'white'}`;\n    }\n\n    return (\n      <div className=\"game container\">\n        <Information status={status} />\n        <Board squares={squares} handleMove={this.handleMove} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}